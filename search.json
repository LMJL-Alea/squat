[{"path":"https://lmjl-alea.github.io/squat/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://lmjl-alea.github.io/squat/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/squat/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://lmjl-alea.github.io/squat/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://lmjl-alea.github.io/squat/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://lmjl-alea.github.io/squat/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://lmjl-alea.github.io/squat/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://lmjl-alea.github.io/squat/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://lmjl-alea.github.io/squat/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://lmjl-alea.github.io/squat/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://lmjl-alea.github.io/squat/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://lmjl-alea.github.io/squat/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://lmjl-alea.github.io/squat/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://lmjl-alea.github.io/squat/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://lmjl-alea.github.io/squat/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://lmjl-alea.github.io/squat/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://lmjl-alea.github.io/squat/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://lmjl-alea.github.io/squat/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://lmjl-alea.github.io/squat/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://lmjl-alea.github.io/squat/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://lmjl-alea.github.io/squat/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://lmjl-alea.github.io/squat/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lise Bellanger. Author. Pierre Drouin. Author. Aymeric Stamm. Author, maintainer. Benjamin Martineau. Contributor.","code":""},{"path":"https://lmjl-alea.github.io/squat/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bellanger L, Drouin P, Stamm (2022). squat: Statistics Quaternion Temporal Data. R package version 0.0.1, https://lmjl-alea.github.io/squat/.","code":"@Manual{,   title = {squat: Statistics for Quaternion Temporal Data},   author = {Lise Bellanger and Pierre Drouin and Aymeric Stamm},   year = {2022},   note = {R package version 0.0.1},   url = {https://lmjl-alea.github.io/squat/}, }"},{"path":"https://lmjl-alea.github.io/squat/index.html","id":"squat","dir":"","previous_headings":"","what":"Statistics for Quaternion Temporal Data","title":"Statistics for Quaternion Temporal Data","text":"goal squat provide extensions common statistical methods analysis unit quaternion time series.","code":""},{"path":"https://lmjl-alea.github.io/squat/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Statistics for Quaternion Temporal Data","text":"can install development version squat GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"LMJL-Alea/squat\")"},{"path":"https://lmjl-alea.github.io/squat/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Statistics for Quaternion Temporal Data","text":"basic example shows solve common problem:","code":"library(squat) ## basic example code"},{"path":"https://lmjl-alea.github.io/squat/reference/DTW.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic Time Warping for Quaternion Time Series — DTW","title":"Dynamic Time Warping for Quaternion Time Series — DTW","text":"function evaluates Dynamic Time Warping (DTW) distance two quaternion time series (QTS).","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/DTW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic Time Warping for Quaternion Time Series — DTW","text":"","code":"DTW(   qts1,   qts2,   resample = TRUE,   disable_normalization = FALSE,   distance_only = FALSE,   step_pattern = dtw::symmetric2 )"},{"path":"https://lmjl-alea.github.io/squat/reference/DTW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic Time Warping for Quaternion Time Series — DTW","text":"qts1 object class qts. qts2 object class qts. resample boolean specifying whether QTS uniformly resampled domain computing distances. Defaults TRUE. disable_normalization boolean specifying whether quaternion normalization disabled. Defaults FALSE ensures always deal unit quaternions. distance_only boolean specifying whether compute distance (backtrack, faster). Defaults FALSE. step_pattern dtw::stepPattern specifying local constraints warping path. Defaults dtw::symmetric2 uses symmetric normalizable warping paths local slope constraints. See dtw::stepPattern information.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/DTW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamic Time Warping for Quaternion Time Series — DTW","text":"object class dtw::dtw storing dynamic time warping results.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/DTW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dynamic Time Warping for Quaternion Time Series — DTW","text":"evaluation grid provided, function assumes two input QTS evaluated grid.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/DTW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic Time Warping for Quaternion Time Series — DTW","text":"","code":"DTW(vespa64$igp[[1]], vespa64$igp[[2]]) #> DTW alignment object #>  Alignment size (query x reference): 101 x 101 #>  Call: dtw::dtw(x = M, step.pattern = step_pattern, distance.only = distance_only)"},{"path":"https://lmjl-alea.github.io/squat/reference/centring_qts.html","id":null,"dir":"Reference","previous_headings":"","what":"QTS Centering and Standardization — centring_qts","title":"QTS Centering and Standardization — centring_qts","text":"function operates centring QTS around geometric mean quaternions. effectively achieved left-multiplying quaternion inverse geometric mean.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/centring_qts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTS Centering and Standardization — centring_qts","text":"","code":"centring_qts(x, standardize = FALSE, keep_summary_stats = FALSE)"},{"path":"https://lmjl-alea.github.io/squat/reference/centring_qts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTS Centering and Standardization — centring_qts","text":"x object class qts. standardize boolean specifying whether standardize QTS addition centering . Defaults FALSE. keep_summary_stats boolean specifying whether mean standard deviation used standardizing data stored output object. Defaults FALSE case centered qts returned.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/centring_qts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTS Centering and Standardization — centring_qts","text":"keep_summary_stats = FALSE, object class qts quaternions centered (possibly standardized) around geometric mean. keep_summary_stats = TRUE, list three components: qts: object class qts quaternions centered (possibly standardized) around geometric mean; mean: numeric vector quaternion Fréchet mean; sd: numeric value quaternion Fréchet standard deviation.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/centring_qts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTS Centering and Standardization — centring_qts","text":"","code":"centring_qts(vespa64$igp[[1]]) #> # A tibble: 101 × 5 #>     time         w         x         y         z #>    <int> <dec:.5!> <dec:.5!> <dec:.5!> <dec:.5!> #>  1     0   0.99364   0.09383   0.06049   0.01484 #>  2     1   0.99425   0.08868   0.05824   0.01455 #>  3     2   0.99489   0.08343   0.05518   0.01401 #>  4     3   0.99553   0.07811   0.05153   0.01307 #>  5     4   0.99606   0.07365   0.04805   0.01184 #>  6     5   0.99650   0.06989   0.04468   0.01037 #>  7     6   0.99686   0.06694   0.04146   0.00869 #>  8     7   0.99714   0.06478   0.03830   0.00674 #>  9     8   0.99738   0.06307   0.03503   0.00451 #> 10     9   0.99761   0.06156   0.03147   0.00204 #> # … with 91 more rows"},{"path":"https://lmjl-alea.github.io/squat/reference/derivative_qts.html","id":null,"dir":"Reference","previous_headings":"","what":"QTS Derivative — derivative_qts","title":"QTS Derivative — derivative_qts","text":"function computes first derivative quaternion time series respect time.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/derivative_qts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTS Derivative — derivative_qts","text":"","code":"derivative_qts(qts)"},{"path":"https://lmjl-alea.github.io/squat/reference/derivative_qts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTS Derivative — derivative_qts","text":"qts object class qts.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/derivative_qts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTS Derivative — derivative_qts","text":"object class qts quaternions measure rotation applied transform attitude previous time point attitude current time point.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/derivative_qts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTS Derivative — derivative_qts","text":"","code":"derivative_qts(vespa64$igp[[1]]) #> # A tibble: 100 × 5 #>     time         w         x         y         z #>    <int> <dec:.5!> <dec:.5!> <dec:.5!> <dec:.5!> #>  1     1   0.99998  -0.00519  -0.00222  -0.00040 #>  2     2   0.99998  -0.00529  -0.00305  -0.00057 #>  3     3   0.99998  -0.00534  -0.00367  -0.00094 #>  4     4   0.99998  -0.00447  -0.00352  -0.00119 #>  5     5   0.99999  -0.00374  -0.00345  -0.00140 #>  6     6   0.99999  -0.00292  -0.00331  -0.00158 #>  7     7   0.99999  -0.00212  -0.00327  -0.00182 #>  8     8   0.99999  -0.00166  -0.00341  -0.00209 #>  9     9   0.99999  -0.00145  -0.00371  -0.00229 #> 10    10   0.99999  -0.00168  -0.00394  -0.00239 #> # … with 90 more rows"},{"path":"https://lmjl-alea.github.io/squat/reference/distDTW.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance Matrix for Quaternion Time Series Samples — distDTW","title":"Distance Matrix for Quaternion Time Series Samples — distDTW","text":"Distance Matrix Quaternion Time Series Samples","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/distDTW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance Matrix for Quaternion Time Series Samples — distDTW","text":"","code":"distDTW(   qts_list,   normalize_distance = TRUE,   labels = NULL,   resample = TRUE,   disable_normalization = FALSE,   step_pattern = dtw::symmetric2 )"},{"path":"https://lmjl-alea.github.io/squat/reference/distDTW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance Matrix for Quaternion Time Series Samples — distDTW","text":"qts_list object class qts_sample. normalize_distance boolean specifying whether compute normalized distance QTS. Please note step patterns normalizable. Defaults FALSE. labels character vector specifying labels QTS. Defaults NULL uses row numbers labels. resample boolean specifying whether QTS uniformly resampled domain computing distances. Defaults TRUE. disable_normalization boolean specifying whether quaternion normalization disabled. Defaults FALSE ensures always deal unit quaternions. step_pattern dtw::stepPattern specifying local constraints warping path. Defaults dtw::symmetric2 uses symmetric normalizable warping paths local slope constraints. See dtw::stepPattern information.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/distDTW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance Matrix for Quaternion Time Series Samples — distDTW","text":"stats::dist object storing distance matrix QTS sample via DTW.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/distDTW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance Matrix for Quaternion Time Series Samples — distDTW","text":"","code":"D <- distDTW(vespa64$igp)"},{"path":"https://lmjl-alea.github.io/squat/reference/exp_qts.html","id":null,"dir":"Reference","previous_headings":"","what":"QTS Exponential — exp_qts","title":"QTS Exponential — exp_qts","text":"function computes exponential quaternion time series time series quaternion exponentials.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/exp_qts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTS Exponential — exp_qts","text":"","code":"exp_qts(x)"},{"path":"https://lmjl-alea.github.io/squat/reference/exp_qts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTS Exponential — exp_qts","text":"x object class qts.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/exp_qts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTS Exponential — exp_qts","text":"object class qts quaternions replaced exponential.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/exp_qts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTS Exponential — exp_qts","text":"","code":"x <- log_qts(vespa64$igp[[1]]) exp_qts(x) #> # A tibble: 101 × 5 #>     time         w         x         y         z #>    <int> <dec:.5!> <dec:.5!> <dec:.5!> <dec:.5!> #>  1     0   0.99427   0.07973   0.06988   0.01334 #>  2     1   0.99483   0.07457   0.06763   0.01313 #>  3     2   0.99542   0.06931   0.06457   0.01269 #>  4     3   0.99602   0.06398   0.06091   0.01184 #>  5     4   0.99652   0.05949   0.05742   0.01070 #>  6     5   0.99694   0.05572   0.05403   0.00932 #>  7     6   0.99729   0.05275   0.05079   0.00772 #>  8     7   0.99757   0.05056   0.04761   0.00583 #>  9     8   0.99782   0.04883   0.04430   0.00366 #> 10     9   0.99805   0.04730   0.04071   0.00125 #> # … with 91 more rows"},{"path":"https://lmjl-alea.github.io/squat/reference/kmeans_qts.html","id":null,"dir":"Reference","previous_headings":"","what":"QTS K-Means Alignment Algorithm — kmeans_qts","title":"QTS K-Means Alignment Algorithm — kmeans_qts","text":"function massages input quaternion time series feed k-means alignment algorithm jointly clustering aligning input QTS.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/kmeans_qts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTS K-Means Alignment Algorithm — kmeans_qts","text":"","code":"kmeans_qts(   x,   k = 1,   centroid = \"mean\",   dissimilarity = \"l2\",   warping = \"affine\",   iter_max = 20,   nstart = 1000,   ncores = 1L )"},{"path":"https://lmjl-alea.github.io/squat/reference/kmeans_qts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTS K-Means Alignment Algorithm — kmeans_qts","text":"x object class qts_sample. k integer specifying number clusters formed. Defaults 1L. centroid string specifying type centroid used. Choices mean medoid. Defaults mean. dissimilarity string specifying type dissimilarity used. Choices l2 pearson. Defaults l2. warping string specifying class warping functions used. Choices none, shift, dilation affine. Defaults affine. iter_max integer specifying maximum number iterations terminating k-mean algorithm. Defaults 20L. nstart integer specifying number random restart making k-mean results robust. Defaults 1000L. ncores integer specifying number cores run multiple restarts k-mean algorithm parallel. Defaults 1L.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/kmeans_qts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTS K-Means Alignment Algorithm — kmeans_qts","text":"object class kma_qts effectively list three components: qts_aligned: object class qts_sample storing sample aligned QTS; qts_centers: list objects class qts representing centers clusters; best_kma_result: object class fdacluster::kma storing results best k-mean alignment result among initialization tried.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/kmeans_qts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTS K-Means Alignment Algorithm — kmeans_qts","text":"","code":"res_kma <- kmeans_qts(vespa64$igp, k = 2, nstart = 1)"},{"path":"https://lmjl-alea.github.io/squat/reference/log_qts.html","id":null,"dir":"Reference","previous_headings":"","what":"QTS Logarithm — log_qts","title":"QTS Logarithm — log_qts","text":"function computes logarithm quaternion time series time series quaternion logarithms.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/log_qts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTS Logarithm — log_qts","text":"","code":"log_qts(x)"},{"path":"https://lmjl-alea.github.io/squat/reference/log_qts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTS Logarithm — log_qts","text":"x object class qts.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/log_qts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTS Logarithm — log_qts","text":"object class qts quaternions replaced logarithm.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/log_qts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTS Logarithm — log_qts","text":"","code":"log_qts(vespa64$igp[[1]]) #> # A tibble: 101 × 5 #>     time         w         x         y         z #>    <int> <dec:.5!> <dec:.5!> <dec:.5!> <dec:.5!> #>  1     0   0.00000   0.07988   0.07001   0.01336 #>  2     1   0.00000   0.07470   0.06775   0.01315 #>  3     2   0.00000   0.06942   0.06467   0.01271 #>  4     3   0.00000   0.06406   0.06099   0.01186 #>  5     4   0.00000   0.05956   0.05749   0.01072 #>  6     5   0.00000   0.05578   0.05408   0.00933 #>  7     6   0.00000   0.05280   0.05084   0.00772 #>  8     7   0.00000   0.05061   0.04765   0.00584 #>  9     8   0.00000   0.04887   0.04434   0.00366 #> 10     9   0.00000   0.04733   0.04074   0.00126 #> # … with 91 more rows"},{"path":"https://lmjl-alea.github.io/squat/reference/mean.qts_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"QTS Geometric Mean — mean.qts_sample","title":"QTS Geometric Mean — mean.qts_sample","text":"function computes pointwise geometric mean QTS sample.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/mean.qts_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTS Geometric Mean — mean.qts_sample","text":"","code":"# S3 method for qts_sample mean(x, ...)"},{"path":"https://lmjl-alea.github.io/squat/reference/mean.qts_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTS Geometric Mean — mean.qts_sample","text":"x object class qts_sample. ... arguments passed methods.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/mean.qts_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTS Geometric Mean — mean.qts_sample","text":"object class qts quaternions pointwise geometric mean input QTS sample.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/mean.qts_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTS Geometric Mean — mean.qts_sample","text":"","code":"mean(vespa64$igp) #> # A tibble: 101 × 5 #>     time         w         x         y         z #>    <int> <dec:.5!> <dec:.5!> <dec:.5!> <dec:.5!> #>  1     0   0.99406   0.09402   0.05288   0.01472 #>  2     1   0.99445   0.08937   0.05352   0.01464 #>  3     2   0.99487   0.08469   0.05348   0.01450 #>  4     3   0.99527   0.08033   0.05280   0.01415 #>  5     4   0.99564   0.07651   0.05164   0.01351 #>  6     5   0.99597   0.07328   0.05011   0.01254 #>  7     6   0.99627   0.07059   0.04825   0.01122 #>  8     7   0.99655   0.06832   0.04607   0.00960 #>  9     8   0.99682   0.06631   0.04356   0.00773 #> 10     9   0.99707   0.06439   0.04079   0.00570 #> # … with 91 more rows"},{"path":"https://lmjl-alea.github.io/squat/reference/median.qts_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"QTS Geometric Median — median.qts_sample","title":"QTS Geometric Median — median.qts_sample","text":"function computes pointwise geometric median QTS sample.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/median.qts_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTS Geometric Median — median.qts_sample","text":"","code":"# S3 method for qts_sample median(x, na.rm = FALSE, ...)"},{"path":"https://lmjl-alea.github.io/squat/reference/median.qts_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTS Geometric Median — median.qts_sample","text":"x object class qts_sample. na.rm logical value indicating whether NA values stripped computation proceeds. ... arguments passed methods.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/median.qts_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTS Geometric Median — median.qts_sample","text":"object class qts quaternions pointwise geometric median input QTS sample.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/median.qts_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTS Geometric Median — median.qts_sample","text":"","code":"median(vespa64$igp) #> # A tibble: 101 × 5 #>     time         w         x         y         z #>    <int> <dec:.5!> <dec:.5!> <dec:.5!> <dec:.5!> #>  1     0   0.99394   0.09157   0.05888   0.01513 #>  2     1   0.99439   0.08642   0.05913   0.01490 #>  3     2   0.99482   0.08181   0.05855   0.01465 #>  4     3   0.99525   0.07752   0.05723   0.01414 #>  5     4   0.99565   0.07364   0.05544   0.01338 #>  6     5   0.99603   0.07017   0.05331   0.01236 #>  7     6   0.99638   0.06712   0.05089   0.01105 #>  8     7   0.99671   0.06452   0.04823   0.00938 #>  9     8   0.99701   0.06221   0.04533   0.00742 #> 10     9   0.99729   0.05996   0.04228   0.00530 #> # … with 91 more rows"},{"path":"https://lmjl-alea.github.io/squat/reference/normalize_qts.html","id":null,"dir":"Reference","previous_headings":"","what":"QTS Normalization — normalize_qts","title":"QTS Normalization — normalize_qts","text":"function ensures quaternions time series unit quaternions.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/normalize_qts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTS Normalization — normalize_qts","text":"","code":"normalize_qts(x)"},{"path":"https://lmjl-alea.github.io/squat/reference/normalize_qts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTS Normalization — normalize_qts","text":"x object class qts.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/normalize_qts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTS Normalization — normalize_qts","text":"object class qts quaternions unit quaternions.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/normalize_qts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTS Normalization — normalize_qts","text":"","code":"normalize_qts(vespa64$igp[[1]]) #> # A tibble: 101 × 5 #>     time         w         x         y         z #>    <int> <dec:.5!> <dec:.5!> <dec:.5!> <dec:.5!> #>  1     0   0.99427   0.07973   0.06988   0.01334 #>  2     1   0.99483   0.07457   0.06763   0.01313 #>  3     2   0.99542   0.06931   0.06457   0.01269 #>  4     3   0.99602   0.06398   0.06091   0.01184 #>  5     4   0.99652   0.05949   0.05742   0.01070 #>  6     5   0.99694   0.05572   0.05403   0.00932 #>  7     6   0.99729   0.05275   0.05079   0.00772 #>  8     7   0.99757   0.05056   0.04761   0.00583 #>  9     8   0.99782   0.04883   0.04430   0.00366 #> 10     9   0.99805   0.04730   0.04071   0.00125 #> # … with 91 more rows"},{"path":"https://lmjl-alea.github.io/squat/reference/plot.kma_qts.html","id":null,"dir":"Reference","previous_headings":"","what":"QTS K-Means Visualization — plot.kma_qts","title":"QTS K-Means Visualization — plot.kma_qts","text":"QTS K-Means Visualization","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/plot.kma_qts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTS K-Means Visualization — plot.kma_qts","text":"","code":"# S3 method for kma_qts plot(x, ...)  # S3 method for kma_qts autoplot(x, ...)"},{"path":"https://lmjl-alea.github.io/squat/reference/plot.kma_qts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTS K-Means Visualization — plot.kma_qts","text":"x object class kmeans_qts produced kmeans_qts() function. ... arguments passed methods.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/plot.kma_qts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTS K-Means Visualization — plot.kma_qts","text":"plot.kma_qts() method return anything autoplot.kma_qts() method returns ggplot2::ggplot object.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/plot.kma_qts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTS K-Means Visualization — plot.kma_qts","text":"","code":"res_kma <- kmeans_qts(vespa64$igp, k = 2, nstart = 1) plot(res_kma)  ggplot2::autoplot(res_kma)"},{"path":"https://lmjl-alea.github.io/squat/reference/plot.prcomp_qts.html","id":null,"dir":"Reference","previous_headings":"","what":"QTS PCA Visualization — plot.prcomp_qts","title":"QTS PCA Visualization — plot.prcomp_qts","text":"QTS PCA Visualization","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/plot.prcomp_qts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTS PCA Visualization — plot.prcomp_qts","text":"","code":"# S3 method for prcomp_qts plot(x, what = \"PC1\", ...)  # S3 method for prcomp_qts autoplot(x, what = \"PC1\", ...)  # S3 method for prcomp_qts screeplot(x, ...)"},{"path":"https://lmjl-alea.github.io/squat/reference/plot.prcomp_qts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTS PCA Visualization — plot.prcomp_qts","text":"x object class prcomp_qts produced prcomp.qts_sample() method. string specifying kind visualization user wants perform. Choices words starting PC ending PC number (case mean QTS displayed along perturbations due required PC) scores (case individuals projected required plane). Defaults PC1. ... = \"PC?\", user can specify whether plot QTS tangent space original space providing boolean argument original_space defaults TRUE. = \"scores\", user can specify plane onto individuals projected providing length-2 integer vector argument plane defaults 1:2.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/plot.prcomp_qts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTS PCA Visualization — plot.prcomp_qts","text":"plot.prcomp_qts() method return anything autoplot.prcomp_qts() method returns ggplot2::ggplot object.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/plot.prcomp_qts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTS PCA Visualization — plot.prcomp_qts","text":"","code":"df <- as_qts_sample(vespa64$igp[1:16]) res_pca <- prcomp(df)  # You can plot the effect of a PC on the mean plot(res_pca, what = \"PC1\") #> The `original_space` boolean argument is not specified. Defaulting to TRUE.   # You can plot the data points in a PC plane plot(res_pca, what = \"scores\") #> The `plane` length-2 integer vector argument is not specified. Defaulting to #> 1:2.   # You can color points according to a categorical variable if (requireNamespace(\"ggplot2\", quietly = TRUE)) {   p <- ggplot2::autoplot(res_pca, what = \"scores\")   p + ggplot2::geom_point(ggplot2::aes(color = vespa64$V[1:16])) } #> The `plane` length-2 integer vector argument is not specified. Defaulting to #> 1:2."},{"path":"https://lmjl-alea.github.io/squat/reference/plot.qts.html","id":null,"dir":"Reference","previous_headings":"","what":"QTS Visualization — plot.qts","title":"QTS Visualization — plot.qts","text":"QTS Visualization","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/plot.qts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTS Visualization — plot.qts","text":"","code":"# S3 method for qts plot(x, change_points = NULL, ...)  # S3 method for qts autoplot(x, change_points = NULL, ...)"},{"path":"https://lmjl-alea.github.io/squat/reference/plot.qts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTS Visualization — plot.qts","text":"x object class qts. change_points integer vector specifying indices change points display . Defaults NULL, case change points displayed. ... arguments passed methods.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/plot.qts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTS Visualization — plot.qts","text":"plot.qts() method return anything autoplot.qts() method returns ggplot2::ggplot object.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/plot.qts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTS Visualization — plot.qts","text":"","code":"plot(vespa64$igp[[1]])  ggplot2::autoplot(vespa64$igp[[1]])"},{"path":"https://lmjl-alea.github.io/squat/reference/plot.qts_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"QTS Sample Visualization — plot.qts_sample","title":"QTS Sample Visualization — plot.qts_sample","text":"QTS Sample Visualization","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/plot.qts_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTS Sample Visualization — plot.qts_sample","text":"","code":"# S3 method for qts_sample plot(x, memberships = NULL, highlighted = NULL, ...)  # S3 method for qts_sample autoplot(x, memberships = NULL, highlighted = NULL, ...)"},{"path":"https://lmjl-alea.github.io/squat/reference/plot.qts_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTS Sample Visualization — plot.qts_sample","text":"x object class qts_sample. memberships vector coercible factor specifying group membership QTS sample. Defaults NULL, case grouping structure displayed. highlighted boolean vector specifying whether QTS sample hightlighted. Defaults NULL, case QTS hightlighted w.r.t. others. ... arguments passed methods.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/plot.qts_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTS Sample Visualization — plot.qts_sample","text":"plot.qts_sample() method return anything autoplot.qts_sample() method returns ggplot2::ggplot object.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/plot.qts_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTS Sample Visualization — plot.qts_sample","text":"","code":"plot(vespa64$igp)  ggplot2::autoplot(vespa64$igp)"},{"path":"https://lmjl-alea.github.io/squat/reference/prcomp.qts_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"PCA for QTS Sample — prcomp.qts_sample","title":"PCA for QTS Sample — prcomp.qts_sample","text":"PCA QTS Sample","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/prcomp.qts_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PCA for QTS Sample — prcomp.qts_sample","text":"","code":"# S3 method for qts_sample prcomp(x, M = 5, fit = FALSE, ...)"},{"path":"https://lmjl-alea.github.io/squat/reference/prcomp.qts_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PCA for QTS Sample — prcomp.qts_sample","text":"x object class qts_sample. M integer value specifying number principal component compute. Defaults 5L. fit boolean specifying whether resulting prcomp_qts object store reconstruction sample retained PCs. Defaults FALSE. ... Arguments passed methods.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/prcomp.qts_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PCA for QTS Sample — prcomp.qts_sample","text":"object class prcomp_qts list following components: tpca: object class MFPCAfit produced function MFPCA::MFPCA(), var_props: numeric vector storing percentage variance explained PC, mean_qts: object class qts containing mean QTS, principal_qts: list qtss containing required principal components.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/prcomp.qts_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PCA for QTS Sample — prcomp.qts_sample","text":"","code":"res_pca <- prcomp(vespa64$igp)"},{"path":"https://lmjl-alea.github.io/squat/reference/qts.html","id":null,"dir":"Reference","previous_headings":"","what":"QTS Class — qts","title":"QTS Class — qts","text":"collection functions implements QTS class. currently provides as_qts() function QTS coercion tibble::tibbles is_qts() function checking object QTS.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/qts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTS Class — qts","text":"","code":"as_qts(x)  is_qts(x)  # S3 method for qts format(x, digits = 5, ...)"},{"path":"https://lmjl-alea.github.io/squat/reference/qts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTS Class — qts","text":"x tibble::tibble columns time, w, x, y z. digits integer value specifying number digits keep printing. Defaults 5L. ... arguments passed methods.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/qts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTS Class — qts","text":"object class qts.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/qts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"QTS Class — qts","text":"quaternion time series (QTS) stored tibble 5 columns: time: first column specifying time points quaternions collected; w: second column specifying first coordinate collected quaternions; x: third column specifying second coordinate collected quaternions; y: fourth column specifying third coordinate collected quaternions; z: fifth column specifying fourth coordinate collected quaternions.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/qts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTS Class — qts","text":"","code":"qts1 <- vespa64$igp[[1]] qts2 <- as_qts(qts1) is_qts(qts1) #> [1] TRUE is_qts(qts2) #> [1] TRUE"},{"path":"https://lmjl-alea.github.io/squat/reference/qts2ats.html","id":null,"dir":"Reference","previous_headings":"","what":"QTS Transformation To Angle Time Series — qts2ats","title":"QTS Transformation To Angle Time Series — qts2ats","text":"function computes univariate time series representing angle first attitudes.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/qts2ats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTS Transformation To Angle Time Series — qts2ats","text":"","code":"qts2ats(x, disable_normalization = FALSE)"},{"path":"https://lmjl-alea.github.io/squat/reference/qts2ats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTS Transformation To Angle Time Series — qts2ats","text":"x object class qts. disable_normalization boolean specifying whether quaternion normalization disabled. Defaults FALSE.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/qts2ats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTS Transformation To Angle Time Series — qts2ats","text":"time series stored tibble::tibble columns time angle angle measures angle current rotation first one.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/qts2ats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTS Transformation To Angle Time Series — qts2ats","text":"","code":"qts2ats(vespa64$igp[[1]]) #> # A tibble: 101 × 2 #>     time  angle #>    <int>  <dbl> #>  1     0 0      #>  2     1 0.0113 #>  3     2 0.0235 #>  4     3 0.0366 #>  5     4 0.0480 #>  6     5 0.0583 #>  7     6 0.0673 #>  8     7 0.0752 #>  9     8 0.0828 #> 10     9 0.0908 #> # … with 91 more rows"},{"path":"https://lmjl-alea.github.io/squat/reference/qts2avts.html","id":null,"dir":"Reference","previous_headings":"","what":"QTS Transformation to Angular Velocity Time Series — qts2avts","title":"QTS Transformation to Angular Velocity Time Series — qts2avts","text":"function projects quaternion time series space angular velocities.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/qts2avts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTS Transformation to Angular Velocity Time Series — qts2avts","text":"","code":"qts2avts(x, body_frame = FALSE)"},{"path":"https://lmjl-alea.github.io/squat/reference/qts2avts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTS Transformation to Angular Velocity Time Series — qts2avts","text":"x object class qts. body_frame boolean specifying whether fixed frame respect coordinates angular velocity computed body frame global frame. Defaults FALSE.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/qts2avts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTS Transformation to Angular Velocity Time Series — qts2avts","text":"time series stored tibble::tibble columns time, x, y z containing angular velocity time point.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/qts2avts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTS Transformation to Angular Velocity Time Series — qts2avts","text":"","code":"qts2avts(vespa64$igp[[1]]) #> # A tibble: 100 × 4 #>     time        x        y          z #>    <dbl>    <dbl>    <dbl>      <dbl> #>  1     1 -0.0103  -0.00465 -0.0000691 #>  2     2 -0.0105  -0.00624 -0.000639  #>  3     3 -0.0107  -0.00738 -0.00151   #>  4     4 -0.00905 -0.00697 -0.00218   #>  5     5 -0.00766 -0.00673 -0.00274   #>  6     6 -0.00608 -0.00637 -0.00325   #>  7     7 -0.00453 -0.00621 -0.00387   #>  8     8 -0.00365 -0.00642 -0.00451   #>  9     9 -0.00327 -0.00697 -0.00501   #> 10    10 -0.00376 -0.00742 -0.00521   #> # … with 90 more rows"},{"path":"https://lmjl-alea.github.io/squat/reference/qts2dts.html","id":null,"dir":"Reference","previous_headings":"","what":"QTS Transformation To Distance Time Series — qts2dts","title":"QTS Transformation To Distance Time Series — qts2dts","text":"function computes real-valued time series reporting pointwise geodesic distance two input QTS time point.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/qts2dts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTS Transformation To Distance Time Series — qts2dts","text":"","code":"qts2dts(x, y)"},{"path":"https://lmjl-alea.github.io/squat/reference/qts2dts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTS Transformation To Distance Time Series — qts2dts","text":"x object class qts. y object class qts.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/qts2dts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTS Transformation To Distance Time Series — qts2dts","text":"time series stored tibble::tibble columns time distance distance measures angular distance quaternions input QTS given time point.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/qts2dts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"QTS Transformation To Distance Time Series — qts2dts","text":"function currently expects two input QTS evaluated time grid.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/qts2dts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTS Transformation To Distance Time Series — qts2dts","text":"","code":"qts2dts(vespa64$igp[[1]], vespa64$igp[[2]]) #> # A tibble: 101 × 2 #>     time distance #>    <int>    <dbl> #>  1     0  0.0120  #>  2     1  0.0106  #>  3     2  0.00983 #>  4     3  0.00936 #>  5     4  0.00794 #>  6     5  0.00714 #>  7     6  0.00731 #>  8     7  0.00775 #>  9     8  0.00808 #> 10     9  0.00824 #> # … with 91 more rows"},{"path":"https://lmjl-alea.github.io/squat/reference/qts2nts.html","id":null,"dir":"Reference","previous_headings":"","what":"QTS Transformation To Norm Time Series — qts2nts","title":"QTS Transformation To Norm Time Series — qts2nts","text":"function computes univariate time series representing norm quaternions.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/qts2nts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTS Transformation To Norm Time Series — qts2nts","text":"","code":"qts2nts(x, disable_normalization = FALSE)"},{"path":"https://lmjl-alea.github.io/squat/reference/qts2nts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTS Transformation To Norm Time Series — qts2nts","text":"x object class qts. disable_normalization boolean specifying whether quaternion normalization disabled. Defaults FALSE.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/qts2nts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTS Transformation To Norm Time Series — qts2nts","text":"time series stored tibble::tibble columns time norm norm measures angular distance current quaternion identity.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/qts2nts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTS Transformation To Norm Time Series — qts2nts","text":"","code":"qts2nts(vespa64$igp[[1]]) #> # A tibble: 101 × 2 #>     time  norm #>    <int> <dbl> #>  1     0 0.214 #>  2     1 0.203 #>  3     2 0.191 #>  4     3 0.178 #>  5     4 0.167 #>  6     5 0.157 #>  7     6 0.147 #>  8     7 0.140 #>  9     8 0.132 #> 10     9 0.125 #> # … with 91 more rows"},{"path":"https://lmjl-alea.github.io/squat/reference/qts_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"QTS Sample Class — qts_sample","title":"QTS Sample Class — qts_sample","text":"collection functions implements QTS sample class. currently provides as_qts_sample() function QTS sample coercion lists qts objects is_qts_sample() function checking object QTS sample.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/qts_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTS Sample Class — qts_sample","text":"","code":"as_qts_sample(x)  is_qts_sample(x)"},{"path":"https://lmjl-alea.github.io/squat/reference/qts_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTS Sample Class — qts_sample","text":"x list tibble::tibbles, columns time, w, x, y z.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/qts_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTS Sample Class — qts_sample","text":"object class qts_sample.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/qts_sample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"QTS Sample Class — qts_sample","text":"QTS sample collection quaternion time series (QTS), stored tibble 5 columns: time: first column specifying time points quaternions collected; w: second column specifying first coordinate collected quaternions; x: third column specifying second coordinate collected quaternions; y: fourth column specifying third coordinate collected quaternions; z: fifth column specifying fourth coordinate collected quaternions.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/qts_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTS Sample Class — qts_sample","text":"","code":"x <- vespa64$igp y <- as_qts_sample(x) is_qts_sample(x) #> [1] TRUE is_qts_sample(y) #> [1] TRUE"},{"path":"https://lmjl-alea.github.io/squat/reference/reorient_qts.html","id":null,"dir":"Reference","previous_headings":"","what":"QTS Reorientation — reorient_qts","title":"QTS Reorientation — reorient_qts","text":"function reorients quaternions QTS representing attitude respect orientation sensor first time point.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/reorient_qts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTS Reorientation — reorient_qts","text":"","code":"reorient_qts(x, disable_normalization = FALSE)"},{"path":"https://lmjl-alea.github.io/squat/reference/reorient_qts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTS Reorientation — reorient_qts","text":"x object class qts. disable_normalization boolean specifying whether quaternion normalization disabled. Defaults FALSE.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/reorient_qts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTS Reorientation — reorient_qts","text":"object class qts quaternions measure attitude respect orientation sensor first time point.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/reorient_qts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTS Reorientation — reorient_qts","text":"","code":"reorient_qts(vespa64$igp[[1]]) #> # A tibble: 101 × 5 #>     time         w         x         y         z #>    <int> <dec:.5!> <dec:.5!> <dec:.5!> <dec:.5!> #>  1     0   1.00000   0.00000   0.00000   0.00000 #>  2     1   0.99998  -0.00519  -0.00222  -0.00040 #>  3     2   0.99993  -0.01048  -0.00527  -0.00097 #>  4     3   0.99983  -0.01582  -0.00895  -0.00190 #>  5     4   0.99971  -0.02029  -0.01248  -0.00307 #>  6     5   0.99957  -0.02402  -0.01595  -0.00444 #>  7     6   0.99943  -0.02693  -0.01927  -0.00599 #>  8     7   0.99929  -0.02904  -0.02258  -0.00777 #>  9     8   0.99914  -0.03067  -0.02604  -0.00979 #> 10     9   0.99897  -0.03209  -0.02980  -0.01201 #> # … with 91 more rows"},{"path":"https://lmjl-alea.github.io/squat/reference/resample_qts.html","id":null,"dir":"Reference","previous_headings":"","what":"QTS Resampling — resample_qts","title":"QTS Resampling — resample_qts","text":"function performs uniform resampling using SLERP.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/resample_qts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTS Resampling — resample_qts","text":"","code":"resample_qts(x, tmin = NA, tmax = NA, nout = 0L, disable_normalization = FALSE)"},{"path":"https://lmjl-alea.github.io/squat/reference/resample_qts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTS Resampling — resample_qts","text":"x object class qts. tmin numeric value specifying lower bound time interval uniform resampling take place. must satisfy tmin >= min(qts$time). Defaults NA case set min(qts$time). tmax numeric value specifying upper bound time interval uniform resampling take place. must satisfy tmax <= max(qts$time). Defaults NA case set max(qts$time). nout integer specifying size uniform grid time resampling. Defaults 0L case uses grid size input QTS. disable_normalization boolean specifying whether quaternion normalization disabled. Defaults FALSE case function makes sure quaternions normalized prior performing SLERP interpolation.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/resample_qts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTS Resampling — resample_qts","text":"object class qts quaternions uniformly sampled range [tmin, tmax].","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/resample_qts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTS Resampling — resample_qts","text":"","code":"resample_qts(vespa64$igp[[1]]) #> # A tibble: 101 × 5 #>     time         w         x         y         z #>    <dbl> <dec:.5!> <dec:.5!> <dec:.5!> <dec:.5!> #>  1     0   0.99427   0.07973   0.06988   0.01334 #>  2     1   0.99483   0.07457   0.06763   0.01313 #>  3     2   0.99542   0.06931   0.06457   0.01269 #>  4     3   0.99602   0.06398   0.06091   0.01184 #>  5     4   0.99652   0.05949   0.05742   0.01070 #>  6     5   0.99694   0.05572   0.05403   0.00932 #>  7     6   0.99729   0.05275   0.05079   0.00772 #>  8     7   0.99757   0.05056   0.04761   0.00583 #>  9     8   0.99782   0.04883   0.04430   0.00366 #> 10     9   0.99805   0.04730   0.04071   0.00125 #> # … with 91 more rows"},{"path":"https://lmjl-alea.github.io/squat/reference/rnorm_qts.html","id":null,"dir":"Reference","previous_headings":"","what":"QTS Random Sampling — rnorm_qts","title":"QTS Random Sampling — rnorm_qts","text":"function adds uncorrelated Gaussian noise logarithm QTS using exponential covariance function.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/rnorm_qts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTS Random Sampling — rnorm_qts","text":"","code":"rnorm_qts(n, mean_qts, alpha = 0.01, beta = 0.001)"},{"path":"https://lmjl-alea.github.io/squat/reference/rnorm_qts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTS Random Sampling — rnorm_qts","text":"n integer specifying many QTS generated. mean_qts object class qts specifying mean QTS. alpha positive scalar specifying variance component log-QTS. Defaults 0.01. beta positive scalar specifying exponential weight. Defaults 0.001.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/rnorm_qts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTS Random Sampling — rnorm_qts","text":"list n objects class qts added noise specified parameters alpha beta.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/rnorm_qts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"QTS Random Sampling — rnorm_qts","text":"See exp_cov_function details roles alpha beta definition covariance operator.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/rnorm_qts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTS Random Sampling — rnorm_qts","text":"","code":"rnorm_qts(1, vespa64$igp[[1]]) #> [[1]] #> # A tibble: 101 × 5 #>     time         w         x         y         z #>    <int> <dec:.5!> <dec:.5!> <dec:.5!> <dec:.5!> #>  1     0   0.99567   0.02874   0.08679  -0.01708 #>  2     1   0.99587   0.01955   0.08752  -0.01446 #>  3     2   0.99632   0.01059   0.08432  -0.01088 #>  4     3   0.99664   0.01609   0.07978  -0.00876 #>  5     4   0.99727   0.01224   0.07279   0.00028 #>  6     5   0.99688   0.00632   0.07856   0.00414 #>  7     6   0.99689   0.00142   0.07864   0.00382 #>  8     7   0.99650   0.00134   0.08356  -0.00100 #>  9     8   0.99669  -0.00345   0.08058   0.00987 #> 10     9   0.99713  -0.01140   0.07414   0.01048 #> # … with 91 more rows #>  #> attr(,\"class\") #> [1] \"qts_sample\" \"list\""},{"path":"https://lmjl-alea.github.io/squat/reference/scale_qts.html","id":null,"dir":"Reference","previous_headings":"","what":"QTS Sample Centering and Standardization — scale_qts","title":"QTS Sample Centering and Standardization — scale_qts","text":"QTS Sample Centering Standardization","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/scale_qts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTS Sample Centering and Standardization — scale_qts","text":"","code":"scale_qts(   x,   center = TRUE,   standardize = TRUE,   by_row = FALSE,   keep_summary_stats = FALSE )"},{"path":"https://lmjl-alea.github.io/squat/reference/scale_qts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTS Sample Centering and Standardization — scale_qts","text":"x object class qts_sample representing sample observed QTS. center boolean specifying whether center sample QTS. set FALSE, original sample returned, meaning standardization performed regardless whether argument standardize set TRUE . Defaults TRUE. standardize boolean specifying whether standardize sample QTS centered. Defaults TRUE. by_row boolean specifying whether QTS scaling happen data point (by_row = TRUE) time point (by_row = FALSE). Defaults FALSE. keep_summary_stats boolean specifying whether mean standard deviation used standardizing data stored output object. Defaults FALSE case list properly rescaled QTS returned.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/scale_qts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTS Sample Centering and Standardization — scale_qts","text":"list properly rescaled QTS stored object class qts_sample keep_summary_stats = FALSE. Otherwise list three components: rescaled_sample: list properly rescaled QTS stored object class qts_sample; mean: numeric vector quaternion Fréchet mean; sd: numeric vector quaternion Fréchet standard deviation.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/scale_qts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTS Sample Centering and Standardization — scale_qts","text":"","code":"x <- scale_qts(vespa64$igp) x[[1]] #> # A tibble: 101 × 5 #>     time         w         x         y         z #>    <dbl> <dec:.5!> <dec:.5!> <dec:.5!> <dec:.5!> #>  1     0   0.99956  -0.01849   0.02258  -0.00497 #>  2     1   0.99960  -0.01996   0.01945  -0.00491 #>  3     2   0.99962  -0.02170   0.01592  -0.00514 #>  4     3   0.99962  -0.02412   0.01211  -0.00573 #>  5     4   0.99960  -0.02614   0.00892  -0.00643 #>  6     5   0.99956  -0.02801   0.00619  -0.00707 #>  7     6   0.99953  -0.02946   0.00407  -0.00758 #>  8     7   0.99951  -0.03028   0.00242  -0.00807 #>  9     8   0.99949  -0.03072   0.00100  -0.00865 #> 10     9   0.99948  -0.03085  -0.00056  -0.00936 #> # … with 91 more rows"},{"path":"https://lmjl-alea.github.io/squat/reference/smooth_qts.html","id":null,"dir":"Reference","previous_headings":"","what":"QTS Smoothing via SLERP Interpolation — smooth_qts","title":"QTS Smoothing via SLERP Interpolation — smooth_qts","text":"function performs smoothing QTS SLERP interpolation.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/smooth_qts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTS Smoothing via SLERP Interpolation — smooth_qts","text":"","code":"smooth_qts(x, alpha = 0.5)"},{"path":"https://lmjl-alea.github.io/squat/reference/smooth_qts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTS Smoothing via SLERP Interpolation — smooth_qts","text":"x object class qts. alpha numeric value [0,1] specifying amount smoothing. closer one, smoother resulting QTS. Defaults 0.5.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/smooth_qts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTS Smoothing via SLERP Interpolation — smooth_qts","text":"object class qts smooth version input QTS.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/smooth_qts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTS Smoothing via SLERP Interpolation — smooth_qts","text":"","code":"smooth_qts(vespa64$igp[[1]]) #> # A tibble: 101 × 5 #>     time         w         x         y         z #>    <int> <dec:.5!> <dec:.5!> <dec:.5!> <dec:.5!> #>  1     0   0.99467   0.07637   0.06803   0.01301 #>  2     1   0.99505   0.07302   0.06618   0.01268 #>  3     2   0.99552   0.06888   0.06361   0.01213 #>  4     3   0.99601   0.06453   0.06055   0.01130 #>  5     4   0.99647   0.06045   0.05732   0.01020 #>  6     5   0.99688   0.05684   0.05403   0.00884 #>  7     6   0.99724   0.05380   0.05075   0.00724 #>  8     7   0.99754   0.05128   0.04743   0.00539 #>  9     8   0.99782   0.04912   0.04403   0.00333 #> 10     9   0.99807   0.04709   0.04049   0.00111 #> # … with 91 more rows"},{"path":"https://lmjl-alea.github.io/squat/reference/straighten_qts.html","id":null,"dir":"Reference","previous_headings":"","what":"QTS Straightening — straighten_qts","title":"QTS Straightening — straighten_qts","text":"function straightens QTS last point equals first point.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/straighten_qts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTS Straightening — straighten_qts","text":"","code":"straighten_qts(qts)"},{"path":"https://lmjl-alea.github.io/squat/reference/straighten_qts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTS Straightening — straighten_qts","text":"qts object class qts.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/straighten_qts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTS Straightening — straighten_qts","text":"object class qts storing straightened QTS.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/straighten_qts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTS Straightening — straighten_qts","text":"","code":"straighten_qts(vespa64$igp[[1]]) #> # A tibble: 101 × 5 #>     time         w         x         y         z #>    <int> <dec:.5!> <dec:.5!> <dec:.5!> <dec:.5!> #>  1     0   0.99427   0.07973   0.06988   0.01334 #>  2     1   0.99483   0.07457   0.06763   0.01313 #>  3     2   0.99542   0.06931   0.06457   0.01269 #>  4     3   0.99602   0.06398   0.06091   0.01184 #>  5     4   0.99652   0.05949   0.05742   0.01070 #>  6     5   0.99694   0.05572   0.05403   0.00932 #>  7     6   0.99729   0.05275   0.05079   0.00772 #>  8     7   0.99757   0.05056   0.04761   0.00583 #>  9     8   0.99782   0.04883   0.04430   0.00366 #> 10     9   0.99805   0.04730   0.04071   0.00125 #> # … with 91 more rows"},{"path":"https://lmjl-alea.github.io/squat/reference/vespa.html","id":null,"dir":"Reference","previous_headings":"","what":"The VESPA dataset — vespa","title":"The VESPA dataset — vespa","text":"set QTS representing individual gait patterns (IGPs) individuals collected number varying factors.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/vespa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The VESPA dataset — vespa","text":"","code":"vespa"},{"path":"https://lmjl-alea.github.io/squat/reference/vespa.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The VESPA dataset — vespa","text":"tibble 320 rows 7 columns: V: categorical variable two levels specifying ID Volunteer; E: categorical variable two levels specifying ID Experimenter; S: categorical variable four levels specifying type Sensor; P: categorical variable four levels specifying Position sensor; : categorical variable two levels specifying ID Acquisition pathway; R: categorical variable 5 levels specifying ID Repetition; igp: 101x5 tibble storing QTS represents IGP individual specific set VESPA conditions.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/vespa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The VESPA dataset — vespa","text":"IGP measures hip rotation typical gait cycle. rotation expressed respect mean position sensor gait cycle. IGP straightened periodic last point matching first one.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/vespa64.html","id":null,"dir":"Reference","previous_headings":"","what":"The VESPA64 dataset — vespa64","title":"The VESPA64 dataset — vespa64","text":"set QTS representing individual gait patterns (IGPs) individuals collected number varying factors.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/vespa64.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The VESPA64 dataset — vespa64","text":"","code":"vespa64"},{"path":"https://lmjl-alea.github.io/squat/reference/vespa64.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The VESPA64 dataset — vespa64","text":"tibble 320 rows 7 columns: V: categorical variable two levels specifying ID Volunteer; E: categorical variable two levels specifying ID Experimenter; S: categorical variable four levels specifying type Sensor; P: categorical variable four levels specifying Position sensor; : categorical variable two levels specifying ID Acquisition pathway; igp: 101x5 tibble storing QTS represents IGP individual specific set VESPA conditions.","code":""},{"path":"https://lmjl-alea.github.io/squat/reference/vespa64.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The VESPA64 dataset — vespa64","text":"IGP measures hip rotation typical gait cycle. rotation expressed respect mean position sensor gait cycle. IGP straightened periodic last point matching first one. essentially reduced version VESPA data set IGPs averaged repetition set conditions.","code":""},{"path":"https://lmjl-alea.github.io/squat/news/index.html","id":"squat-001","dir":"Changelog","previous_headings":"","what":"squat 0.0.1","title":"squat 0.0.1","text":"CRAN release: 2022-09-27 Added NEWS.md file track changes package. Initial version.","code":""}]
