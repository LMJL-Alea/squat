// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_squad_RCPPEXPORTS_H_GEN_
#define RCPP_squad_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace squad {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("squad", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("squad", "_squad_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in squad");
            }
        }
    }

    inline double GeodesicQuaternionDistance(const Rcpp::NumericMatrix& x, const Rcpp::NumericMatrix& y, const unsigned int xIndex, const unsigned int yIndex) {
        typedef SEXP(*Ptr_GeodesicQuaternionDistance)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_GeodesicQuaternionDistance p_GeodesicQuaternionDistance = NULL;
        if (p_GeodesicQuaternionDistance == NULL) {
            validateSignature("double(*GeodesicQuaternionDistance)(const Rcpp::NumericMatrix&,const Rcpp::NumericMatrix&,const unsigned int,const unsigned int)");
            p_GeodesicQuaternionDistance = (Ptr_GeodesicQuaternionDistance)R_GetCCallable("squad", "_squad_GeodesicQuaternionDistance");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_GeodesicQuaternionDistance(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(xIndex)), Shield<SEXP>(Rcpp::wrap(yIndex)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline Rcpp::NumericMatrix GetCostMatrix(const Rcpp::NumericMatrix& x, const Rcpp::NumericMatrix& y) {
        typedef SEXP(*Ptr_GetCostMatrix)(SEXP,SEXP);
        static Ptr_GetCostMatrix p_GetCostMatrix = NULL;
        if (p_GetCostMatrix == NULL) {
            validateSignature("Rcpp::NumericMatrix(*GetCostMatrix)(const Rcpp::NumericMatrix&,const Rcpp::NumericMatrix&)");
            p_GetCostMatrix = (Ptr_GetCostMatrix)R_GetCCallable("squad", "_squad_GetCostMatrix");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_GetCostMatrix(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(y)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericMatrix >(rcpp_result_gen);
    }

    inline double GetL2Distance(const Rcpp::NumericMatrix& x, const Rcpp::NumericMatrix& y) {
        typedef SEXP(*Ptr_GetL2Distance)(SEXP,SEXP);
        static Ptr_GetL2Distance p_GetL2Distance = NULL;
        if (p_GetL2Distance == NULL) {
            validateSignature("double(*GetL2Distance)(const Rcpp::NumericMatrix&,const Rcpp::NumericMatrix&)");
            p_GetL2Distance = (Ptr_GetL2Distance)R_GetCCallable("squad", "_squad_GetL2Distance");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_GetL2Distance(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(y)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline Rcpp::NumericMatrix RegularizeGrid(const Rcpp::NumericVector& x, const Rcpp::NumericMatrix& y, const unsigned int outSize = 0) {
        typedef SEXP(*Ptr_RegularizeGrid)(SEXP,SEXP,SEXP);
        static Ptr_RegularizeGrid p_RegularizeGrid = NULL;
        if (p_RegularizeGrid == NULL) {
            validateSignature("Rcpp::NumericMatrix(*RegularizeGrid)(const Rcpp::NumericVector&,const Rcpp::NumericMatrix&,const unsigned int)");
            p_RegularizeGrid = (Ptr_RegularizeGrid)R_GetCCallable("squad", "_squad_RegularizeGrid");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_RegularizeGrid(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(outSize)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericMatrix >(rcpp_result_gen);
    }

}

#endif // RCPP_squad_RCPPEXPORTS_H_GEN_
