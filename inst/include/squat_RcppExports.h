// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_squat_RCPPEXPORTS_H_GEN_
#define RCPP_squat_RCPPEXPORTS_H_GEN_

#include <RcppEigen.h>
#include <Rcpp.h>

namespace squat {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("squat", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("squat", "_squat_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in squat");
            }
        }
    }

    inline Rcpp::DataFrame resample_qts(const Rcpp::DataFrame& qts, const unsigned int nout = 0, const bool disable_normalization = false) {
        typedef SEXP(*Ptr_resample_qts)(SEXP,SEXP,SEXP);
        static Ptr_resample_qts p_resample_qts = NULL;
        if (p_resample_qts == NULL) {
            validateSignature("Rcpp::DataFrame(*resample_qts)(const Rcpp::DataFrame&,const unsigned int,const bool)");
            p_resample_qts = (Ptr_resample_qts)R_GetCCallable("squat", "_squat_resample_qts");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_resample_qts(Shield<SEXP>(Rcpp::wrap(qts)), Shield<SEXP>(Rcpp::wrap(nout)), Shield<SEXP>(Rcpp::wrap(disable_normalization)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::DataFrame >(rcpp_result_gen);
    }

    inline Eigen::VectorXd GetGeodesicMean(const std::vector<Eigen::VectorXd>& quaternionSample, unsigned int maxIterations = 2000, double maxEpsilon = 1.0e-5) {
        typedef SEXP(*Ptr_GetGeodesicMean)(SEXP,SEXP,SEXP);
        static Ptr_GetGeodesicMean p_GetGeodesicMean = NULL;
        if (p_GetGeodesicMean == NULL) {
            validateSignature("Eigen::VectorXd(*GetGeodesicMean)(const std::vector<Eigen::VectorXd>&,unsigned int,double)");
            p_GetGeodesicMean = (Ptr_GetGeodesicMean)R_GetCCallable("squat", "_squat_GetGeodesicMean");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_GetGeodesicMean(Shield<SEXP>(Rcpp::wrap(quaternionSample)), Shield<SEXP>(Rcpp::wrap(maxIterations)), Shield<SEXP>(Rcpp::wrap(maxEpsilon)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Eigen::VectorXd >(rcpp_result_gen);
    }

}

#endif // RCPP_squat_RCPPEXPORTS_H_GEN_
